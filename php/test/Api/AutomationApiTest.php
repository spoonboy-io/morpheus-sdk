<?php
/**
 * AutomationApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * AutomationApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AutomationApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addExecuteSchedules
     *
     * Creates a Execute Schedule.
     *
     */
    public function testAddExecuteSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addPowerScheduleInstances
     *
     * Add Instances to a Power Schedule.
     *
     */
    public function testAddPowerScheduleInstances()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addPowerScheduleServers
     *
     * Add Servers to a Power Schedule.
     *
     */
    public function testAddPowerScheduleServers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addPowerSchedules
     *
     * Creates a Power Schedule.
     *
     */
    public function testAddPowerSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addScaleThresholds
     *
     * Creates a Scale Threshold.
     *
     */
    public function testAddScaleThresholds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addTasks
     *
     * Creates a Task.
     *
     */
    public function testAddTasks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for addWorkflows
     *
     * Creates a Workflow.
     *
     */
    public function testAddWorkflows()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deletePowerScheduleInstances
     *
     * Remove Instances from a Power Schedule.
     *
     */
    public function testDeletePowerScheduleInstances()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deletePowerScheduleServers
     *
     * Remove Servers from a Power Schedule.
     *
     */
    public function testDeletePowerScheduleServers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for executeExecutionRequest
     *
     * Executes an Execution Request.
     *
     */
    public function testExecuteExecutionRequest()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for executeTasks
     *
     * Executes a Task.
     *
     */
    public function testExecuteTasks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for executeWorkflows
     *
     * Executes a Workflow.
     *
     */
    public function testExecuteWorkflows()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getExecuteSchedules
     *
     * Retrieves a Specific Execute Schedule.
     *
     */
    public function testGetExecuteSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getExecutionRequest
     *
     * Retrieves a Specific Execution Request.
     *
     */
    public function testGetExecutionRequest()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPowerSchedules
     *
     * Retrieves a Specific Power Schedule.
     *
     */
    public function testGetPowerSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getScaleThresholds
     *
     * Retrieves a Specific Scale Threshold.
     *
     */
    public function testGetScaleThresholds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getTaskTypes
     *
     * Retrieves a Specific Task Type.
     *
     */
    public function testGetTaskTypes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getTasks
     *
     * Retrieves a Specific Task.
     *
     */
    public function testGetTasks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWorkflows
     *
     * Retrieves a Specific Workflow.
     *
     */
    public function testGetWorkflows()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listExecuteSchedules
     *
     * Retrieves all Execute Schedules.
     *
     */
    public function testListExecuteSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listPowerSchedules
     *
     * Retrieves all Power Schedules.
     *
     */
    public function testListPowerSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listScaleThresholds
     *
     * Retrieves all Scale Thresholds.
     *
     */
    public function testListScaleThresholds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listTaskTypes
     *
     * Retrieves all Task Types.
     *
     */
    public function testListTaskTypes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listTasks
     *
     * Retrieves all Tasks.
     *
     */
    public function testListTasks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWorkflows
     *
     * Retrieves all Workflows.
     *
     */
    public function testListWorkflows()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeExecuteSchedules
     *
     * Deletes a Execute Schedule.
     *
     */
    public function testRemoveExecuteSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removePowerSchedules
     *
     * Deletes a Power Schedule.
     *
     */
    public function testRemovePowerSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeScaleThresholds
     *
     * Deletes a Scale Threshold.
     *
     */
    public function testRemoveScaleThresholds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeTasks
     *
     * Deletes a Task.
     *
     */
    public function testRemoveTasks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeWorkflows
     *
     * Deletes a Workflow.
     *
     */
    public function testRemoveWorkflows()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateExecuteSchedules
     *
     * Updates a Execute Schedule.
     *
     */
    public function testUpdateExecuteSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePowerSchedules
     *
     * Updates a Power Schedule.
     *
     */
    public function testUpdatePowerSchedules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateScaleThresholds
     *
     * Updates a Scale Threshold.
     *
     */
    public function testUpdateScaleThresholds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateTasks
     *
     * Updates a Task.
     *
     */
    public function testUpdateTasks()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWorkflows
     *
     * Updates a Workflow.
     *
     */
    public function testUpdateWorkflows()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
