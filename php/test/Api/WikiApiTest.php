<?php
/**
 * WikiApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * WikiApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WikiApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for addWiki
     *
     * Create a Wiki Page.
     *
     */
    public function testAddWiki()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWiki
     *
     * Retrieves a specific Wiki page.
     *
     */
    public function testGetWiki()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWikiApp
     *
     * Retrieves an App Wiki Page.
     *
     */
    public function testGetWikiApp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWikiCategories
     *
     * Retrieves all Wiki categories associated with the account.
     *
     */
    public function testGetWikiCategories()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWikiCloud
     *
     * Retrieves a Cloud Wiki Page.
     *
     */
    public function testGetWikiCloud()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWikiCluster
     *
     * Retrieves a Cluster Wiki Page.
     *
     */
    public function testGetWikiCluster()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWikiGroup
     *
     * Retrieves a Group Wiki Page.
     *
     */
    public function testGetWikiGroup()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWikiInstance
     *
     * Retrieves an Instance Wiki Page.
     *
     */
    public function testGetWikiInstance()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getWikiServer
     *
     * Retrieves a Server Wiki Page.
     *
     */
    public function testGetWikiServer()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listWiki
     *
     * Retrieves wiki pages associated with the account..
     *
     */
    public function testListWiki()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for removeWiki
     *
     * Deletes a Wiki Page.
     *
     */
    public function testRemoveWiki()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWiki
     *
     * Updates a Wiki Page.
     *
     */
    public function testUpdateWiki()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWikiApp
     *
     * Update an App Wiki Page.
     *
     */
    public function testUpdateWikiApp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWikiCloud
     *
     * Update a Cloud Wiki Page.
     *
     */
    public function testUpdateWikiCloud()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWikiCluster
     *
     * Update a Cluster Wiki Page.
     *
     */
    public function testUpdateWikiCluster()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWikiGroup
     *
     * Update a Group Wiki Page.
     *
     */
    public function testUpdateWikiGroup()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWikiInstance
     *
     * Update an Instance Wiki Page.
     *
     */
    public function testUpdateWikiInstance()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateWikiServer
     *
     * Update a Server Wiki Page.
     *
     */
    public function testUpdateWikiServer()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
