<?php
/**
 * IdentitySourcesSAMLConfigConfigTest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Morpheus API
 *
 * Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.
 *
 * The version of the OpenAPI document: 6.2.1
 * Contact: dev@morpheusdata.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * IdentitySourcesSAMLConfigConfigTest Class Doc Comment
 *
 * @category    Class
 * @description IdentitySourcesSAMLConfigConfig
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class IdentitySourcesSAMLConfigConfigTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "IdentitySourcesSAMLConfigConfig"
     */
    public function testIdentitySourcesSAMLConfigConfig()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "role_attribute_name"
     */
    public function testPropertyRoleAttributeName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "required_attribute_value"
     */
    public function testPropertyRequiredAttributeValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "given_name_attribute"
     */
    public function testPropertyGivenNameAttribute()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "surname_attribute"
     */
    public function testPropertySurnameAttribute()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "logout_url"
     */
    public function testPropertyLogoutUrl()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_include_saml_request"
     */
    public function testPropertyDoNotIncludeSamlRequest()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "public_key"
     */
    public function testPropertyPublicKey()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "email_attribute"
     */
    public function testPropertyEmailAttribute()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "url"
     */
    public function testPropertyUrl()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_signature"
     */
    public function testPropertyDoNotValidateSignature()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_status_code"
     */
    public function testPropertyDoNotValidateStatusCode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_destination"
     */
    public function testPropertyDoNotValidateDestination()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_issue_instants"
     */
    public function testPropertyDoNotValidateIssueInstants()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_assertions"
     */
    public function testPropertyDoNotValidateAssertions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_auth_statements"
     */
    public function testPropertyDoNotValidateAuthStatements()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_subject"
     */
    public function testPropertyDoNotValidateSubject()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_conditions"
     */
    public function testPropertyDoNotValidateConditions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_audiences"
     */
    public function testPropertyDoNotValidateAudiences()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "do_not_validate_subject_recipients"
     */
    public function testPropertyDoNotValidateSubjectRecipients()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "saml_signature_mode"
     */
    public function testPropertySamlSignatureMode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "force_authn"
     */
    public function testPropertyForceAuthn()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
